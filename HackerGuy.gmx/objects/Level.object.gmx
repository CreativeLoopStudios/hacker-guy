<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// generate level
var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;

// create the grid
grid = ds_grid_create(width, height);

// fill the grid with the void
ds_grid_set_region(grid, 0, 0, width - 1, height - 1, VOID);

// reading json file
var level1Arr = ReadCSVFile("Level1.csv");

var xx = 0;
var yy = 0;

var len = array_height_2d(level1Arr);
for(var line = 0; line &lt; len; line++)
{
    var length = array_length_2d(level1Arr, line);
    for(var column = 0; column &lt; length; column++)
    {
        var tileType = level1Arr[column, line];
        grid[# xx, yy] = real(tileType);
        xx++;
    }
    xx = 0;
    yy++;
}

// draw the level using the grid
for (var yy = 0; yy &lt; height; yy++)
{
    for(var xx = 0; xx &lt; width; xx++)
    {
        var tileType = grid[# xx, yy];
        switch(tileType)
        {
            case FLOOR:
                tile_add(bgFloor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, 0);
                break;
            case PLAYER:
                grid[# xx, yy] = FLOOR;
                instance_create((xx * CELL_WIDTH) + (sprite_get_width(sPlayerBottom) / 2), ((yy * CELL_HEIGHT) + (sprite_get_height(sPlayerBottom) / 2)), Player);
                tile_add(bgFloor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -yy * CELL_HEIGHT / 2);
                break;
            case FIREWALL:
                grid[# xx, yy] = FLOOR;
                instance_create((xx * CELL_WIDTH) + (sprite_get_width(sFirewall) / 2), ((yy * CELL_HEIGHT) + (sprite_get_height(sFirewall) / 2)), Firewall);
                tile_add(bgFloor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, 0);
                break;
            case GREEN_PC:
                //grid[# xx, yy] = FLOOR;
                instance_create((xx * CELL_WIDTH) + (sprite_get_width(sGreenPC) / 2), ((yy * CELL_HEIGHT) + (sprite_get_height(sGreenPC) / 2)), GreenPC);
                tile_add(bgFloor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, 0);
                break;
        }
    }
}

var tw = CELL_WIDTH / 2;
var th = CELL_HEIGHT / 2;

// autotile
for (var yy = 0; yy &lt; height; yy++)
{
    for (var xx = 0; xx &lt; width; xx++)
    {
        if (grid[# xx, yy] == VOID)
        {
            // Get the tile's x and y
            var tx = xx * tw;
            var ty = yy * th;
            
            var right = grid[# xx + 1, yy]  == FLOOR;
            var left = grid[# xx - 1, yy] == FLOOR;
            var top = grid[# xx, yy - 1] == FLOOR;
            var bottom = grid[# xx, yy + 1] == FLOOR;
            
            var rightUpper = grid[# xx + 1, yy - 1] == FLOOR;
            var leftUpper = grid[# xx - 1, yy - 1] == FLOOR;
            var rightDown = grid[# xx + 1, yy + 1] == FLOOR;
            var leftDown = grid[# xx - 1, yy + 1] == FLOOR;
            
            var bottomChip = grid[# xx, yy + 2] == FLOOR;
            
            if(bottom)
            {
                tile_add(bgChip1, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -ty);
            } else if(bottomChip) {
                if(left) {
                    if(right) {
                        if(top) {
                            tile_add(bgWallAll, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -ty);
                        } else {
                            tile_add(bgWallLeftRightBottom, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -ty);
                        }
                    } else if(top) {
                        tile_add(bgWallLeftTopBottom, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -ty);
                    } else {
                        tile_add(bgWallLeftBottom, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -ty);
                    }
                } else if (right){
                    if(top) {
                        tile_add(bgWallRightTopBottom, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -ty);
                    } else {
                        tile_add(bgWallRightBottom, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -ty);
                    }
                } else if (top) {
                    tile_add(bgWallTopBottom, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -ty);                
                } else {
                    tile_add(bgWallBottom, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -ty);   
                }
            } else {
                if(left) {
                    if(right) {
                        if(top) {
                            tile_add(bgWallLeftRightTop, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -ty);
                        } else {
                            tile_add(bgWallLeftRight, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -ty);
                        }
                    } else if(top) {
                        tile_add(bgWallLeftTop, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -ty);
                    } else {
                        tile_add(bgWallLeft, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -ty);
                    }
                } else if (right){
                    if(top) {
                        tile_add(bgWallRightTop, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -ty);
                    } else {
                        tile_add(bgWallRight, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -ty);
                    }
                } else if (top) {
                    tile_add(bgWallTop, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -ty);                
                } else {
                    if(leftDown) {
                        if (rightDown) {
                            tile_add(bgWallLeftRight, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -ty);
                        } else {
                            tile_add(bgWallLeft, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -ty);
                        }
                    } else if (rightDown) {
                        tile_add(bgWallRight, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -ty);
                    } else {
                        tile_add(bgWall, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, -ty);
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
