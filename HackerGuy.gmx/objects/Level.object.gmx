<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// generate level
var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;

// create the grid
grid = ds_grid_create(width, height);

// fill the grid with the void
ds_grid_set_region(grid, 0, 0, width - 1, height - 1, VOID);

// reading json file
var level1File = ReadJsonFile("Level1.json");
var level1Json = json_decode(level1File);

var defaultList = ds_map_find_value(level1Json, "default");

var levelObj = ds_list_find_value(defaultList, 0);

var levelData = levelObj[? "data"];

var levelSize = ds_list_size(levelData);

var xx = 0;
var yy = 0;
    
for(var i = 0; i &lt; levelSize; i++)
{
    var tileType = ds_list_find_value(levelData, i);
    grid[# xx, yy] = tileType;
    
    xx++;
    if((i + 1) mod 10 == 0)
    {
        xx = 0;
        yy++;
    }
}

// draw the level using the grid
for (var yy = 0; yy &lt; height; yy++)
{
    for(var xx = 0; xx &lt; width; xx++)
    {
        switch(grid[# xx, yy])
        {
            case FLOOR:
                tile_add(bgFloor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, 0);
                break;
            case WALL:
                tile_add(bgWall, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, 0);
                break;
            case PLAYER:
                instance_create((xx * CELL_WIDTH) - (sprite_get_width(sPlayer) / 2), yy * CELL_HEIGHT - (sprite_get_height(sPlayer) / 2), Player);
                tile_add(bgFloor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, 0);
                break;
        }
    }
}

var tw = CELL_WIDTH / 2;
var th = CELL_HEIGHT / 2;

// autotile
for (var yy = 0; yy &lt; height; yy++)
{
    for (var xx = 0; xx &lt; width; xx++)
    {
        if (grid[# xx, yy] == WALL)
        {
            // Get the tile's x and y
            var tx = xx * tw;
            var ty = yy * th;
            
            var right = grid[# (xx + 1) div 2, yy div 2] != FLOOR;
            var left = grid[# (xx - 1) div 2, yy div 2] != FLOOR;
            var top = grid[# xx div 2, (yy - 1) div 2] != FLOOR;
            var bottom = grid[# xx , yy + 1] == FLOOR;
            
            if(bottom)
            {
                tile_add(bgChip1, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, (yy + 1) * CELL_HEIGHT, -ty);
            }
        }
    }
}


// destroying json level
ds_map_destroy(level1Json);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
